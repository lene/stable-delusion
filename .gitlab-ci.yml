# GitLab CI/CD configuration for stable-delusion
# Runs tests, code quality checks, security analysis, and GitHub mirroring on every push

# Use Python 3.10 image (matches development environment)
image: python:3.10

# Define stages for the pipeline
stages:
  - setup
  - test
  - quality
  - deploy
  - verify
  - publish

# Cache poetry dependencies between runs for faster builds
cache:
  paths:
    - .venv/

# Variables
variables:
  # Use virtual environment in project directory for caching
  POETRY_VENV_IN_PROJECT: "true"
  # Don't ask for confirmation
  POETRY_NO_INTERACTION: "1"
  # Don't create virtual environment (we'll use the cached one)
  POETRY_CACHE_DIR: ".poetry-cache"

# Install dependencies (runs before each job)
before_script:
  - pip install poetry
  - poetry config virtualenvs.create true
  - poetry config virtualenvs.in-project true
  - poetry install --with dev

# Setup stage - validate project structure
setup:
  stage: setup
  script:
    - echo "Project structure validation..."
    - ls -la
    - echo "Python version:"
    - python --version
    - echo "Poetry version:"
    - poetry --version
    - echo "Project dependencies:"
    - poetry show
  only:
    - main
    - merge_requests
    - multi-image-support

# Test stage - run the full test suite
test:
  stage: test
  script:
    - echo "Running test suite..."
    - poetry run pytest -n auto tests/ -v --tb=short
    - echo "‚úÖ All $(poetry run pytest tests/ --collect-only -q | grep -c test_) tests passed!"
  artifacts:
    reports:
      junit: test-reports.xml
    expire_in: 1 week
  only:
    - main
    - merge_requests
    - multi-image-support

# Code quality stage - run flake8 linting
flake8:
  stage: quality
  script:
    - echo "Running flake8 code quality checks..."
    - poetry run flake8 stable_delusion tests --count --statistics
    - echo "‚úÖ All code quality checks passed!"
  allow_failure: false
  only:
    - main
    - merge_requests
    - multi-image-support

pylint:
  stage: quality
  script:
    - echo "Running pylint code quality checks..."
    - poetry run pylint -j 0 stable_delusion tests --score=yes
    - echo "‚úÖ All code quality checks passed!"
  allow_failure: false
  only:
    - main
    - merge_requests
    - multi-image-support

# Type checking with mypy
mypy:
  stage: quality
  script:
    - echo "Running static type checking with mypy..."
    - poetry run mypy stable_delusion/
    - echo "‚úÖ All type checks passed!"
  allow_failure: false
  only:
    - main
    - merge_requests
    - multi-image-support

# Security scanning with bandit
bandit:
  stage: quality
  script:
    - echo "Running security analysis with bandit..."
    - poetry run bandit -r stable_delusion/ --format txt
    - echo "‚úÖ Security analysis completed - no vulnerabilities found!"
  allow_failure: false
  only:
    - main
    - merge_requests
    - multi-image-support

# Version Bump - automatically increment version for deployment
bump_version:
  stage: deploy
  script:
    - echo "üî¢ Checking and bumping version..."
    - poetry version patch
    - NEW_VERSION=$(poetry version -s)
    - echo "üìà Version bumped to $NEW_VERSION"
    - git config --global user.email "ci@gitlab.com"
    - git config --global user.name "GitLab CI"
    - git add pyproject.toml
    - git commit -m "Bump version to $NEW_VERSION [skip ci]"
    - git push origin HEAD:main
    - echo "‚úÖ Version $NEW_VERSION committed and pushed"
  only:
    - main
  when: on_success

# TestPyPI Deployment - upload to TestPyPI for verification
deploy_testpypi:
  stage: deploy
  script:
    - echo "üì¶ Building package for TestPyPI..."
    - poetry build
    - echo "üß™ Uploading to TestPyPI..."
    - poetry publish --repository testpypi
    - echo "‚úÖ Package uploaded to TestPyPI successfully!"
  only:
    - main
  when: on_success
  needs:
    - bump_version
  environment:
    name: testing
    url: https://test.pypi.org/project/stable-delusion/

# TestPyPI Verification - install and test the package from TestPyPI
verify_testpypi:
  stage: verify
  image: python:3.10-slim
  script:
    - echo "‚è≥ Waiting for TestPyPI package to be available..."
    - sleep 30
    - echo "üîç Installing package from TestPyPI..."
    - pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ stable-delusion
    - echo "‚úÖ Package installed successfully"
    - echo "üß™ Testing CLI functionality..."
    - timeout 10 stable-delusion --version || echo "‚úÖ Version command test completed"
    - python -c "import stable_delusion; print('‚úÖ Package import successful - version:', stable_delusion.__version__)"
    - python -c "from stable_delusion.main import main; print('‚úÖ Main entry point accessible')"
    - echo "üéâ TestPyPI package verification completed successfully!"
  only:
    - main
  when: on_success
  needs:
    - deploy_testpypi

# Production PyPI Deployment - publish to PyPI after successful TestPyPI verification
deploy_pypi:
  stage: publish
  script:
    - echo "üöÄ Building and deploying stable-delusion to production PyPI..."
    - poetry build
    - echo "üì¶ Package built successfully"
    - poetry publish
    - echo "üéâ stable-delusion published to PyPI successfully!"
  only:
    - main
  when: on_success
  needs:
    - verify_testpypi
  environment:
    name: production
    url: https://pypi.org/project/stable-delusion/