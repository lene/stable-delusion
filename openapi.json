{
  "openapi": "3.0.3",
  "info": {
    "title": "NanoAPIClient API",
    "description": "Flask web API for image generation using multiple AI models including Google Gemini 2.5 Flash and SeeEdit Seedream 4.0. Supports multi-image input, custom prompts, automatic upscaling integration, and flexible storage backends (local filesystem or AWS S3).",
    "version": "1.0.0",
    "contact": {
      "name": "Lene Preuss",
      "email": "lene.preuss@gmail.com"
    },
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5000",
      "description": "Development server"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Get API information",
        "description": "Returns basic information about the API and available endpoints",
        "operationId": "getApiInfo",
        "responses": {
          "200": {
            "description": "API information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInfo"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check",
        "description": "Returns the health status of the API service",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              }
            }
          }
        }
      }
    },
    "/generate": {
      "post": {
        "summary": "Generate image from prompt and reference images",
        "description": "Upload reference images and generate new images using AI models (Google Gemini 2.5 Flash or SeeEdit Seedream 4.0) with optional upscaling. Supports both local filesystem and AWS S3 storage backends.",
        "operationId": "generateImage",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GenerateImageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateImageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/openapi.json": {
      "get": {
        "summary": "Get OpenAPI specification",
        "description": "Returns the OpenAPI specification for this API",
        "operationId": "getOpenApiSpec",
        "responses": {
          "200": {
            "description": "OpenAPI specification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/token-usage": {
      "get": {
        "summary": "Get token usage statistics",
        "description": "Returns aggregate statistics about API token usage across all image generation requests",
        "operationId": "getTokenUsage",
        "tags": ["Token Usage"],
        "responses": {
          "200": {
            "description": "Token usage statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenUsageStats"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/token-usage/history": {
      "get": {
        "summary": "Get token usage history",
        "description": "Returns detailed history of individual API token usage entries",
        "operationId": "getTokenUsageHistory",
        "tags": ["Token Usage"],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of history entries to return. If not specified, returns all entries.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token usage history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenUsageHistory"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "NanoAPIClient API"
          },
          "description": {
            "type": "string",
            "example": "Flask web API for image generation using Google Gemini AI"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          },
          "endpoints": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["name", "description", "version", "endpoints"]
      },
      "HealthStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["healthy", "unhealthy"],
            "example": "healthy"
          },
          "service": {
            "type": "string",
            "example": "NanoAPIClient"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          }
        },
        "required": ["status", "service", "version"]
      },
      "GenerateImageRequest": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Text prompt for image generation. If not provided, uses default prompt.",
            "example": "A futuristic cityscape with flying cars at sunset"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Reference images to use for generation. At least one image is required.",
            "minItems": 1
          },
          "project_id": {
            "type": "string",
            "description": "Google Cloud Project ID. Uses default if not provided.",
            "example": "my-project-id"
          },
          "location": {
            "type": "string",
            "description": "Google Cloud region. Uses default if not provided.",
            "example": "us-central1"
          },
          "scale": {
            "type": "integer",
            "enum": [2, 4],
            "description": "Upscale factor for the generated image. Optional.",
            "example": 4
          },
          "output": {
            "type": "string",
            "description": "Custom output filename. If not provided, uses timestamp-based name.",
            "example": "my_generated_image.png"
          },
          "output_dir": {
            "type": "string",
            "description": "Directory where generated files will be saved. Defaults to current directory.",
            "example": "./output"
          },
          "storage_type": {
            "type": "string",
            "enum": ["local", "s3"],
            "description": "Storage backend for generated images. 'local' saves to filesystem, 's3' saves to AWS S3. Uses configuration default if not provided.",
            "example": "s3"
          },
          "model": {
            "type": "string",
            "enum": ["gemini", "seedream"],
            "description": "AI model to use for image generation. 'gemini' uses Google Gemini 2.5 Flash, 'seedream' uses SeeEdit Seedream 4.0. Defaults to 'gemini' if not provided.",
            "example": "gemini"
          }
        },
        "required": ["images"]
      },
      "GenerateImageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Image generated successfully"
          },
          "prompt": {
            "type": "string",
            "example": "A futuristic cityscape with flying cars at sunset"
          },
          "project_id": {
            "type": "string",
            "example": "my-project-id"
          },
          "location": {
            "type": "string",
            "example": "us-central1"
          },
          "scale": {
            "type": "integer",
            "nullable": true,
            "example": 4
          },
          "saved_files": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Paths to the uploaded reference images",
            "example": ["uploads/image1.png", "uploads/image2.jpg"]
          },
          "generated_file": {
            "type": "string",
            "nullable": true,
            "description": "Path to the generated image file",
            "example": "./generated_2024-01-01-12:00:00.png"
          },
          "output_dir": {
            "type": "string",
            "example": "."
          },
          "upscaled": {
            "type": "boolean",
            "description": "Whether the image was upscaled",
            "example": true
          }
        },
        "required": ["message", "prompt", "project_id", "location", "scale", "saved_files", "generated_file", "output_dir", "upscaled"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message describing what went wrong",
            "example": "Missing 'images' parameter"
          }
        },
        "required": ["error"]
      },
      "TokenUsageStats": {
        "type": "object",
        "properties": {
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens used across all requests",
            "example": 156789
          },
          "total_requests": {
            "type": "integer",
            "description": "Total number of API requests made",
            "example": 42
          },
          "tokens_by_model": {
            "type": "object",
            "description": "Token usage grouped by AI model",
            "additionalProperties": {
              "type": "integer"
            },
            "example": {
              "gemini-2.5-flash": 89432,
              "seedream-4-0-250828": 67357
            }
          },
          "requests_by_model": {
            "type": "object",
            "description": "Request count grouped by AI model",
            "additionalProperties": {
              "type": "integer"
            },
            "example": {
              "gemini-2.5-flash": 25,
              "seedream-4-0-250828": 17
            }
          },
          "tokens_by_operation": {
            "type": "object",
            "description": "Token usage grouped by operation type",
            "additionalProperties": {
              "type": "integer"
            },
            "example": {
              "generate": 156789
            }
          }
        },
        "required": ["total_tokens", "total_requests", "tokens_by_model", "requests_by_model", "tokens_by_operation"]
      },
      "TokenUsageEntry": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the token usage was recorded",
            "example": "2025-01-10T12:34:56.789Z"
          },
          "model": {
            "type": "string",
            "description": "AI model that was used",
            "example": "gemini-2.5-flash"
          },
          "tokens": {
            "type": "integer",
            "description": "Number of tokens used in this request",
            "example": 3742
          },
          "operation": {
            "type": "string",
            "description": "Type of operation performed",
            "example": "generate"
          },
          "prompt_hash": {
            "type": "string",
            "nullable": true,
            "description": "SHA-256 hash (first 16 chars) of the prompt used",
            "example": "a7f3d8e9b2c4f5e1"
          }
        },
        "required": ["timestamp", "model", "tokens", "operation"]
      },
      "TokenUsageHistory": {
        "type": "object",
        "properties": {
          "total_entries": {
            "type": "integer",
            "description": "Number of history entries returned",
            "example": 100
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenUsageEntry"
            },
            "description": "List of token usage entries"
          }
        },
        "required": ["total_entries", "history"]
      }
    }
  },
  "tags": [
    {
      "name": "Image Generation",
      "description": "Operations for generating images using AI"
    },
    {
      "name": "API Management",
      "description": "Operations for API information and health checks"
    },
    {
      "name": "Token Usage",
      "description": "Operations for tracking and viewing API token usage statistics"
    }
  ]
}